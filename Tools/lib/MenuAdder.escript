/*
 * This file is part of the open source part of the
 * Platform for Algorithm Development and Rendering (PADrend).
 * Web page: http://www.padrend.de/
 * Copyright (C) 2017 Florian Pieper <fpieper@mail.upb.de>
 * 
 * PADrend consists of an open source part and a proprietary part.
 * The open source part of PADrend is subject to the terms of the Mozilla
 * Public License, v. 2.0. You should have received a copy of the MPL along
 * with this library; see the file LICENSE. If not, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

/*
*Adds a sandwich menu to each tutorials html-file
*Adds also a footer to each html-file
*/
static IndexBuilder = load(__DIR__ + '/IndexBuilder.escript');
static Parser = load(__DIR__ + '/MarkdownParser.escript');
static CodeSectionParser = load(__DIR__ + '/CodeSectionParser.escript');

static rootFolder = "";
static javaScriptFile = "";
static cssFile = "";

static sectionStartComment = "<!--AUTOGENERATED MENU SECTION START: Please do not edit or remove this comment-->";
static sectionEndComment = 	 "<!--AUTOGENERATED MENU SECTION END: Please do not edit or remove this comment-->";

static htmlFooter = "<footer>\n\tPADrend-Tutorials written by Sascha Brandt, Stanislaw Eppinger,  Henrik Heine and Florian Pieper\n</footer>";

static setUpCSSAndJSPath = fn(){
	javaScriptFile = rootFolder + "menu.js";
	cssFile = rootFolder + "main.css";
};

static createMenuPrequel = fn(relativeCssFile){ 
	return 
	"<link rel=\"stylesheet\" type=\"text/css\" href=\"" + relativeCssFile + "\"/>\n" +
	"<div class=\"menu\" id=\"MainMenu\">\n" +
	"<a href=\"javascript:void(0)\" class=\"btnClose\" onclick=\"closeMenu()\">&times;</a>\n";
};

static createMenuSequel = fn(relativeJavaScriptFile){
	return 
	"\n</div>\n" +
	"<div class=\"container\" onclick=\"openMenu()\">\n" +
	"	<div class=\"bar\"></div>\n" +
	"	<div class=\"bar\"></div>\n" +
	"	<div class=\"bar\"></div>\n" +
	"</div>\n" +
	"<script src = \"" + relativeJavaScriptFile + "\"></script>\n";
};
	
static extractMenuFromFile = fn(menuFile){
	var content = "";
	var menu = "";
	
	try{
		content = IO.loadTextFile(menuFile);
	}
	catch(e){
		Runtime.warn("Could not load index.html");
		return null;
	}
	var lines = content.split("\n");
	var addLines = false;
	
	foreach(lines as var line){
		if(line.contains("</body>"))
			break;
		
		if(addLines)
			menu += line + "\n";
	
		if (line.contains("<body>"))
			addLines = true;
	}
	
	return menu;	
};

static extractMenu = fn(content){
	var menu = "";
	
	var lines = content.split("\n");
	var addLines = false;
	
	foreach(lines as var line){
		if(line.contains("</body>"))
			break;
		
		if(addLines)
			menu += line + "\n";
	
		if (line.contains("<body>")){
			var parts = processBodyLine(line, true);

			if(parts[1] != "")
				menu += parts[1] + "\n";

			addLines = true;
		}
	}
	
	return menu;	
};

static processBodyLine = fn(line, beginTag){
	var element = (beginTag) ? "<body>" : "</body>";

	var split = line.split(element);
	
	if(split.size() > 2)
		return null;
	
	if(split.size() == 0)
		return ["", ""];
	
	if(split.size() == 1){
		if(line.startsWith(element))
			return ["", split[0].trim()];
		return [split[0].trim(), ""];
	}
	
	return [split[0].trim(), split[1].trim()];
};

static addMenu = fn(htmlFile, menu){
	var oldMenu = "";
	var content = "";
	var linesBeforeBody = "";
	var linesAfterBody = "";
	var footerFound = false;
	
	if(!htmlFile.endsWith(".html"))
		return;
	
	try{
		content = IO.loadTextFile(htmlFile);
	}
	catch(e){
		Runtime.warn("Could not load file " + htmlFile );
		return;
	}
	
	var lines = content.split("\n");
	var addToMenu = false;
	var addToAfterBody = false;
	
	foreach(lines as var line){
		if(line.contains(sectionStartComment))
			addToMenu = true;
		
		if(addToAfterBody && !addToMenu && !line.contains("</body>"))
			linesAfterBody += line + "\n";
		else if(addToMenu)
			oldMenu += line + "\n";
		else{
			
			if(line.contains("<body>")){
				var content = processBodyLine(line, true);
				if(content){
					if(content[0] != "")
						linesBeforeBody += content[0] + "\n";
					
					linesBeforeBody += "<body>\n";
					
					if(content[1] != "")
						linesAfterBody += content[1] + "\n";
				}
				else{
					outln("File " + file + " seems to be corrupted. Two body tags found!");
				}
			}
			else
				linesBeforeBody += line + "\n";
		}
		
		if(line.contains(sectionEndComment))
			addToMenu = false;
			
		if(line.contains("<footer>"))
			footerFound = true;
				
		if(line.contains("<body>"))
			 addToAfterBody = true;
			 
		//No footer till now, so lets add one
		if(line.contains("</body>") && !footerFound && !line.contains("<footer>")){
			var content = processBodyLine(line, false);
			if(content){
				if(content[0] != "")
					linesAfterBody += content[0] + "\n";
						
				linesAfterBody += htmlFooter + "\n";
				linesAfterBody += "</body>\n";
				
				if(content[1] != "")
					linesAfterBody += content[1] + "\n";
			}
		}
	}
	
	//content of menu has not changed. So do not change the file to avoid unnecessary git-push.
	if(oldMenu == menu)
		return;
		
	//otherwise add the new menu to the file
	var newContent = linesBeforeBody + menu + linesAfterBody;
	
	//remove last \n to. Otherwise we would add more and more 
	//line breaks to the end of the file, if executing multiple times 
	newContent = newContent.substr(0, newContent.length()-1); 
	
	try{
		outln("Writing changes to " + htmlFile);
		IO.saveTextFile(htmlFile, newContent);
	}
	catch(e){
		outln(e);
		Runtime.warn("Could not save file " + htmlFile);
	}
};

static _recurseFiles = fn(rootFolder){
	var indexTree = IndexBuilder.createTree(rootFolder);
	if(!indexTree)
		return;
	
	var htmlVisitor = new IndexBuilder.CollectHTMLFilesVisitor();
	htmlVisitor.doTraversal(indexTree);
	
	var htmlFiles = htmlVisitor.htmlFiles;
	var parser = new Parser();

	
	foreach(htmlFiles as var file){
		var index = IndexBuilder.getIndex(indexTree, true, file); //relative to file
		index = CodeSectionParser.replaceMarkDownLinksByHTMLLinks(index);
		var htmlIndex = parser.convertDocument(index); //TODO parse index here
		var menu = extractMenu(htmlIndex);
		var relativeCSSFile = IndexBuilder.absoluteToRelativePath(cssFile, file, rootFolder);
		var relativeJSFile = IndexBuilder.absoluteToRelativePath(javaScriptFile, file, rootFolder);
		
		var htmlMenu = 	sectionStartComment + "\n" + 
						createMenuPrequel(relativeCSSFile) + 
						menu + 
						createMenuSequel(relativeJSFile) + 
						sectionEndComment + "\n";
		
		addMenu(file, htmlMenu);
	}
		
};

static MenuAdder = new Type();

MenuAdder.recurseFiles ::= fn(root){
	//inti stuff
	rootFolder = root;
	setUpCSSAndJSPath();
	
	_recurseFiles(root);
};

return MenuAdder;
